from main import bot
from bot.database.database import db
from bot.keyboards import keyboards as kb


class Description:
    @staticmethod
    async def send_descript(chat_id: int, txt: str, reply_markup) -> None:
        status_message_id = await db.get_status_msg_id(chat_id)

        await bot.edit_message_text(
            chat_id=chat_id,
            text=txt,
            message_id=status_message_id,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    @staticmethod
    async def main_descript(chat_id) -> None:
        txt = (
            'Бот для получения расписания уроков Светленского лицея.\n Может '
            'автоматически проверять расписание и присылать новое расписание '
            'при изменении, обеспечивая его актуальность. \n'
            'Для включения нужно зайти в меню "Автообновление" в настройках. \n'
            'Подробнее о его настройке, а также описание работы '
            'можно узнать по кнопке ниже. \n\nБот также работает в группах. '
            'Для работы нужно добавить его и выдать права администратора. \n\n'
            'При обнаружении ошибок или возникновении вопросов, пожалуйста, '
            'напишите мне через кнопку "Поддержка".'
        )
        await Description.send_descript(chat_id, txt, kb.description())

    @staticmethod
    async def autosend_descript(chat_id: int) -> None:
        txt = (
            'Меню "Автообновление" позволяет включить, '
            'а также настроить классы для автоматического получения '
            'обновлений расписания. \nВ сообщении указан статус работы '
            'и классы, по которым бот будет присылать изменения. '
            'По умолчанию там уже будет класс, который вы выбрали при '
            'включении бота. При необходимости вы можете добавить еще два '
            'класса для получения обновлений их расписания. \nДля того чтобы '
            'добавить класс, нажмите на кнопку и выберите нужный класс. '
            'Чтобы удалить класс, выполните операцию еще раз, выбрав тот же '
            'класс. \n\n'
            'Как работает автоматическое обновление расписания:\n\n'
            '*-* В будние дни расписание может быть отправлено на текущий '
            'день и на завтра.\n*-* На текущий день оно может быть отправлено,'
            ' если расписание было изменено на текущий день и сейчас до '
            '15 часов.\n*-* На завтра оно может быть отправлено, если '
            'расписание на завтра было изменено, и сейчас больше 15 часов.'
            'Если расписание на завтра не было изменено, оно отправится в '
            '20 часов.\n*-* В субботу расписание может быть отправлено только, '
            'если оно изменилось на субботу и сейчас меньше 11 часов.'
            '\n*-* В воскресенье расписание будет отправлено в 20 часов '
            'и позже при изменении.\n\n'
            '*-* С 00 до 06 часов бот не будет автоматически проверять '
            'изменение расписания и обновлять статус, но расписание все еще '
            'может быть получено через кнопку "расписание".'
        )
        await Description.send_descript(chat_id, txt, kb.back())

    @staticmethod
    async def buttons_descript(chat_id: int) -> None:
        txt = (
            '*Главное меню*: \n\n*- Расписание*:\n'
            'Кнопка "Расписание" нужна, чтобы в ручном режиме получить '
            'расписание. Нажав на неё, можно выбрать день для получения '
            'расписания на этот день для выбранного по умолчанию класса. '
            'Если нужно получить расписание для другого класса, нужно нажать '
            'кнопку "Другой класс" и после выбора класса выбрать день, на '
            'который будет получено расписание.\n*- Настройки*:\nОткрывает '
            'настройки.\n\nНастройки:\n\n*- Изменить класс*:\nПозволяет '
            'сменить класс по умолчанию.\n'
            '*- Автообновление*:\nПодробнее о меню автообновления '
            'можно узнать по кнопке в предыдущем меню.\n'
            '*- Закреплять расписание*:\nИзменяет параметр, который отвечает '
            'за то, будет ли бот закреплять отправленное расписание. '
            'Актуально для групп.\n*- Настройки цвета*:\nПозволяет '
            'сменить цвет фона и текста расписания.\n'
            '*- Удалять предыдущее расписание*:\nПереключает, будет ли бот '
            'оставлять расписание для каждого отдельного класса в одном '
            'экземпляре.\n*- Отключить бота*:\nОтключает бота.\n\n'
            '*-* Если всё ещё остались непонятные моменты, '
            'напишите мне через кнопку в предыдущем меню.'
        )
        await Description.send_descript(chat_id, txt, kb.back())
