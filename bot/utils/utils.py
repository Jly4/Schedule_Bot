import asyncio

from aiogram import types
from loguru import logger
from typing import Union
from datetime import datetime
from aiogram.exceptions import TelegramBadRequest

from main import bot
from bot.logs.log_config import custom_logger
from bot.logs.log_config import loguru_config
from bot.database.db import bot_database as db
from bot.keyboards import keyboards as kb


classes_dict = {
    'a1': '1–∞', 'b1': '1–±', 'v1': '1–≤', 'g1': '1–≥', 'd1': '1–¥', 'e1': '1–µ',
    'j1': '1–∂', 'z1': '1–∑',
    'a2': '2–∞', 'b2': '2–±', 'v2': '2–≤', 'g2': '2–≥', 'd2': '2–¥', 'e2': '2–µ',
    'j2': '2–∂', 'z2': '2–∑',
    'a3': '3–∞', 'b3': '3–±', 'v3': '3–≤', 'g3': '3–≥', 'd3': '3–¥', 'e3': '3–µ',
    'a4': '4–∞', 'b4': '4–±', 'v4': '4–≤', 'g4': '4–≥', 'd4': '4–¥',
    'a5': '5–∞', 'b5': '5–±', 'v5': '5–≤', 'g5': '5–≥',
    'a6': '6–∞', 'b6': '6–±', 'v6': '6–≤', 'g6': '6–≥',
    'a7': '7–∞', 'b7': '7–±', 'v7': '7–≤', 'g7': '7–≥', 'd7': '7–¥',
    'a8': '8–∞', 'b8': '8–±', 'v8': '8–≤', 'g8': '8–≥',
    'a9': '9–∞', 'b9': '9–±', 'v9': '9–≤',
    'a10': '10–∞', 'b10': '10–±',
    'a11': '11–∞', 'b11': '11–±'
}


async def run_bot_tasks():
    loguru_config()  # load loguru config
    await db.database_init()

    chat_id_list = await db.get_user_id_list()
    if not chat_id_list:
        return

    for chat_id in chat_id_list:
        bot_enabled = await db.get_db_data(chat_id, 'bot_enabled')
        if not bot_enabled:
            return

        active_user = await user_is_active(chat_id)
        if not active_user:
            await db.delete_chat_id(chat_id)
            continue

        from bot.utils.status import send_status
        await send_status(chat_id)

        await run_task_if_disabled(chat_id, 'schedule_auto_send')


async def user_is_active(chat_id: int) -> bool:
    active_time = await db.get_db_data(chat_id, 'last_print_time')
    if active_time == '–µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å':
        return True

    datetime_format = datetime.strptime(active_time, '%d.%m.%Y. %H:%M:%S')
    difference = datetime.now() - datetime_format
    if difference.days > 90:
        custom_logger.info(chat_id, '<r>User was inactive in last 90days</>')
        return False
    return True


async def del_msg_by_id(chat_id: int, msg_id: types.message_id, msg_name:
str = '') -> None:
    try:
        await bot.delete_message(chat_id, msg_id)  # deleting message
    except TelegramBadRequest:
        msg = f'<y>message: <r>{msg_name}, </>error: </><r>MsgNotFound</>'
        custom_logger.debug(chat_id, msg)
    except Exception as e:
        msg = f'<y>message: <r>{msg_name}</> error: </><r>{e}</>'
        custom_logger.debug(chat_id, msg)


async def del_msg_by_db_name(chat_id: int, msg_id_column_name: Union[int,
str]) -> None:
    custom_logger.debug(chat_id, f'<y>message: <r>{msg_id_column_name}</></>')

    message_id: int = await db.get_db_data(chat_id, msg_id_column_name)

    await del_msg_by_id(chat_id, message_id, msg_id_column_name)


async def settings(chat_id: int) -> None:
    custom_logger.debug(chat_id)
    from bot.utils.status import send_status

    await send_status(chat_id, edit=1, reply_markup=kb.settings())


async def status_message_text(chat_id: int) -> str:
    settings = await db.get_db_data(chat_id,
                                    'pin_schedule_message',
                                    'schedule_auto_send',
                                    'school_class',
                                    'last_printed_change_time',
                                    'last_check_schedule')

    # save settings into variables
    pin_schedule_message, schedule_auto_send, school_class, \
    last_printed_change_time, last_check_schedule = settings

    formatted_class = await format_school_class(school_class)

    status_message = f"""
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_check_schedule}
üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_printed_change_time}\n
üéì –ö–ª–∞—Å—Å: {formatted_class}
üìå –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {['–ù–µ—Ç', '–î–∞'][pin_schedule_message]}\n
‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
{['üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞', "üü¢ –í–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç"][schedule_auto_send]}
"""
    return status_message


async def format_school_class(school_class) -> str:
    """return school class name to a status message

    :param school_class:
    :return:
    """
    return classes_dict[school_class]


async def disable_bot(query: Union[types.CallbackQuery, types.Message]) -> None:
    if type(query) is types.CallbackQuery:
        chat_id = query.message.chat.id  # get chat_id
    else:
        chat_id = query.chat.id

    chat = await bot.get_chat(chat_id)  # get chat info
    chat_type = chat.type

    if chat_type == 'private':
        status_id = await db.get_status_msg_id(chat_id)
        for msg_id in range(status_id + 10, status_id - 25, -1):
            await del_msg_by_id(chat_id, msg_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
    await del_msg_by_db_name(chat_id, 'last_schedule_message_id')
    await del_msg_by_db_name(chat_id, 'last_status_message_id')

    await db.update_db_data(chat_id,
                            schedule_auto_send=0,
                            bot_enabled=0,
                            last_status_message_id=0)


async def start_command(chat_id: int) -> None:
    user_id_list: list = await db.get_user_id_list()  # get chat_id list

    if chat_id not in user_id_list:  # check chat_id in db
        await db.add_new_chat_id(chat_id)  # add chat_id to db

    await db.update_db_data(chat_id, schedule_auto_send=0, bot_enabled=1)

    await del_msg_by_db_name(chat_id, 'last_status_message_id')


async def get_admins_id_list(chat_id: int) -> list:
    chat = await bot.get_chat(chat_id)  # get chat info
    chat_type = chat.type  # get a chat type
    custom_logger.debug(chat_id)

    if chat_type == 'private':
        return [chat_id]

    else:
        admins = await bot.get_chat_administrators(chat_id)

        admins_list = [admin.user.id for admin in admins]
        custom_logger.debug(chat_id, f'<y>admin_list: <r>{admins_list}</></>')

        return admins_list


async def run_task_if_disabled(chat_id: int, task_name: str) -> None:
    all_tasks = asyncio.all_tasks()
    task_name_with_id = f'{chat_id}_{task_name}'

    for task in all_tasks:
        if task.get_name() == task_name_with_id and not task.done():
            custom_logger.debug(chat_id,
                                f'<y>task: <r>{task_name} </>running</>')
            return
    if not await db.get_db_data(chat_id, 'schedule_auto_send'):
        custom_logger.debug(chat_id, f'<y>task: <r>{task_name} </>disabled</>')
        return
    custom_logger.debug(chat_id, f'<y>task: <r>{task_name} </>starting</>')
    if task_name == 'schedule_auto_send':
        from bot.utils.schedule import schedule_auto_send
        asyncio.create_task(schedule_auto_send(chat_id), name=task_name_with_id)
    else:
        custom_logger.error(chat_id, f'<y>Wrong task: <r>{task_name}</></>')


async def bot_enabled(chat_id: int) -> bool:
    is_bot_enabled = await db.get_db_data(chat_id, 'bot_enabled')

    if is_bot_enabled:
        return True
    else:
        msg = 'bot –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è'
        disable_msg = await bot.send_message(chat_id, msg)

        await asyncio.sleep(3)
        await bot.delete_message(chat_id, disable_msg)


async def set_schedule_bg_color(callback_query) -> None:
    chat_id = callback_query.message.chat.id
    custom_logger.debug(chat_id)

    color_code = callback_query.data[10:22]
    color_name = callback_query.data[22:]

    await db.update_db_data(chat_id, schedule_bg_color=color_code)
    txt = f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {color_name} —Ü–≤–µ—Ç'

    from bot.utils.status import send_status
    from bot.utils.schedule import send_schedule

    await del_msg_by_db_name(chat_id, 'last_schedule_message_id')
    await send_status(chat_id, text=txt, reply_markup=None)

    await asyncio.sleep(2)
    await send_status(chat_id)
    await send_schedule(chat_id, now=1)


