import asyncio

from aiogram import types
from loguru import logger
from typing import Union
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageIdentifierNotSpecified

from bot.databases.database import bot_database as db
from bot.keyboards import keyboards as kb
from bot.init_bot import bot


async def delete_msg_by_id(chat_id: int, message_id: types.message_id, message_name: str = '') -> None:
    try:
        await bot.delete_message(chat_id, message_id)  # deleting message
    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
        logger.opt(colors=True).error(f'<y>Error deleting message: <r>{message_name}, </>error: </>'
                                      f'<r>MessageToDeleteNotFound</>')
    except Exception as e:
        logger.opt(exception=True, colors=True).error(f'<y>Error deleting message: <r>{message_name}, </>error: </>'
                                                      f'<r>{e}</>')


async def delete_msg_by_column_name(chat_id: int, message_id_column_name: Union[int, str]) -> None:
    logger.opt(colors=True).debug(f'<yellow>chat_id: <r>{f"{chat_id}".ljust(15)} | </> message: <r>{message_id_column_name}</></>')
    message_id: int = await db.get_db_data(chat_id, message_id_column_name)  # –ü–æ–ª—É—á–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏—è

    await delete_msg_by_id(chat_id, message_id, message_id_column_name)


async def settings(chat_id: int) -> None:
    logger.opt(colors=True).debug(f'(chat_id: {chat_id}) starting')

    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status_message_id = await db.get_status_msg_id(chat_id)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    status_text = await status_message_text(chat_id)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π—Å—Ç—Ä–∫–æ–∞–º–∏
    await bot.edit_message_text(chat_id=chat_id,
                                text=status_text,
                                message_id=status_message_id,
                                reply_markup=kb.settings())


async def status_message_text(chat_id: int) -> str:
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    settings = await db.get_db_data(chat_id, 'pin_schedule_message', 'auto_schedule', 'school_class', 'school_change',
                                    'last_printed_change_time', 'last_check_schedule', 'last_status_message_id')

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    pin_schedule_message, auto_schedule, school_class, school_change, \
    last_printed_change_time, last_check_schedule, last_status_message_id = settings

    formatted_class = await format_school_class(school_class)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç–∞—Ç—É—Å–∞
    message = f"""
üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_check_schedule}
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_printed_change_time}\n
üéì –ö–ª–∞—Å—Å: {formatted_class}
üìö –°–º–µ–Ω–∞: {['–ø–µ—Ä–≤–∞—è', '–≤—Ç–æ—Ä–∞—è'][school_change - 1]}
üìå –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {['–ù–µ—Ç', '–î–∞'][pin_schedule_message]}\n
‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n{['üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞', f"üü¢ –í–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç."][auto_schedule]}\n\n
"""
    return message


# format school class
async def format_school_class(school_class):
    # set value
    school_class_dict = {
        'a1': '1–∞', 'b1': '1–±', 'v1': '1–≤', 'g1': '1–≥', 'd1': '1–¥', 'e1': '1–µ', 'j1': '1–∂', 'z1': '1–∑',
        'a2': '2–∞', 'b2': '2–±', 'v2': '2–≤', 'g2': '2–≥', 'd2': '2–¥', 'e2': '2–µ', 'j2': '2–∂', 'z2': '2–∑',
        'a3': '3–∞', 'b3': '3–±', 'v3': '3–≤', 'g3': '3–≥', 'd3': '3–¥', 'e3': '3–µ',
        'a4': '4–∞', 'b4': '4–±', 'v4': '4–≤', 'g4': '4–≥', 'd4': '4–¥',
        'a5': '5–∞', 'b5': '5–±', 'v5': '5–≤', 'g5': '5–≥',
        'a6': '6–∞', 'b6': '6–±', 'v6': '6–≤', 'g6': '6–≥',
        'a7': '7–∞', 'b7': '7–±', 'v7': '7–≤', 'g7': '7–≥', 'd7': '7–¥',
        'a8': '8–∞', 'b8': '8–±', 'v8': '8–≤', 'g8': '8–≥',
        'a9': '9–∞', 'b9': '9–±', 'v9': '9–≤',
        'a10': '10–∞', 'b10': '10–±',
        'a11': '11–∞', 'b11': '11–±'
    }

    return school_class_dict[school_class]


# format school class
async def existing_school_class(school_class):
    # set value
    school_class_dict = {
        'a1': '1–∞', 'b1': '1–±', 'v1': '1–≤', 'g1': '1–≥', 'd1': '1–¥', 'e1': '1–µ', 'j1': '1–∂', 'z1': '1–∑',
        'a2': '2–∞', 'b2': '2–±', 'v2': '2–≤', 'g2': '2–≥', 'd2': '2–¥', 'e2': '2–µ', 'j2': '2–∂', 'z2': '2–∑',
        'a3': '3–∞', 'b3': '3–±', 'v3': '3–≤', 'g3': '3–≥', 'd3': '3–¥', 'e3': '3–µ',
        'a4': '4–∞', 'b4': '4–±', 'v4': '4–≤', 'g4': '4–≥', 'd4': '4–¥',
        'a5': '5–∞', 'b5': '5–±', 'v5': '5–≤', 'g5': '5–≥',
        'a6': '6–∞', 'b6': '6–±', 'v6': '6–≤', 'g6': '6–≥',
        'a7': '7–∞', 'b7': '7–±', 'v7': '7–≤', 'g7': '7–≥', 'd7': '7–¥',
        'a8': '8–∞', 'b8': '8–±', 'v8': '8–≤', 'g8': '8–≥',
        'a9': '9–∞', 'b9': '9–±', 'v9': '9–≤',
        'a10': '10–∞', 'b10': '10–±',
        'a11': '11–∞', 'b11': '11–±'
    }

    return 1 if school_class in school_class_dict.keys() else 0


async def disable_bot(query: Union[types.CallbackQuery, types.Message]) -> None:
    if type(query) is types.CallbackQuery:
        chat_id = query.message.chat.id  # get chat_id
    else:
        chat_id = query.chat.id

    chat = await bot.get_chat(chat_id)  # get chat info
    chat_type = chat.type  # get chat type

    if chat_type == 'private':
        status_id = await db.get_status_msg_id(chat_id)
        for msg_id in range(status_id + 10, status_id - 10, -1):
            await delete_msg_by_id(chat_id, msg_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
    await delete_msg_by_column_name(chat_id, 'last_schedule_message_id')
    await delete_msg_by_column_name(chat_id, 'last_status_message_id')

    await db.update_db_data(chat_id,
                            auto_schedule=0,
                            bot_enabled=0,
                            last_status_message_id=0)


async def start_command(chat_id: int) -> None:
    user_id_list: list = await db.get_user_id_list()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if chat_id not in user_id_list:  # –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f'New user: {chat_id}')

        await db.add_new_chat_id(chat_id)  # add chat_id to db

    await db.update_db_data(chat_id, auto_schedule=0, bot_enabled=1)

    await delete_msg_by_column_name(chat_id, 'last_status_message_id')
    await delete_msg_by_column_name(chat_id, 'last_disable_message_id')


async def get_admins_id_list(chat_id: int) -> list:
    chat = await bot.get_chat(chat_id)  # get chat info
    chat_type = chat.type  # get chat type
    logger.opt(colors=True).debug(f'<y>chat_id: <r>{f"{chat_id}".ljust(15)} | </>starting</>')

    if chat_type == 'private':
        return [chat_id]

    else:
        admins = await bot.get_chat_administrators(chat_id)

        admins_list = [admin.user.id for admin in admins]
        logger.opt(colors=True).debug(f'<y>admin_list: <r>{admins_list}</></>')

        return admins_list


async def task_not_running(task_name: str) -> bool:
    all_tasks = asyncio.all_tasks()

    for task in all_tasks:
        if task.get_name() == task_name and not task.done():
            logger.opt(colors=True).info(f'<yellow>{task_name}: <r>Running</></>')

            return False

    logger.opt(colors=True).info(f'<yellow>{task_name}: <r>Not Running</></>')
    return True


async def bot_enabled(chat_id: int) -> bool:
    is_bot_enabled = await db.get_db_data(chat_id, 'bot_enabled')

    if is_bot_enabled:
        return True
    else:
        disabled_msg = await bot.send_message(chat_id, 'bot –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è')

        await asyncio.sleep(3)
        await bot.delete_message(chat_id, disabled_msg)
