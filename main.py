import logging
import re
import asyncio
import warnings
from datetime import datetime
import pandas as pd
import pytz
from PIL import Image, ImageDraw, ImageFont
from aiogram import Bot, Dispatcher
from aiogram.utils import executor
# from configs import config
from configs import tconfig as config

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π BeautifulSoup
warnings.filterwarnings("ignore", category=UserWarning, module="bs4")

# log config
basic_log = False
debug_log = False

if 'log_level' in dir(config) and config.log_level >= 1:
    basic_log = True
    if config.log_level >= 2:
        debug_log = True
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO, filename='bot.log', encoding='UTF-8', datefmt='%Y-%m-%d %H:%M:%S')
    log = logging.getLogger()


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, –∞ —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token=config.token)
dp = Dispatcher(bot)

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
local_timezone = pytz.timezone('Asia/Tomsk')


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
last_print_schedule = '–µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å'  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
last_check_schedule = '–µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å'  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
prev_schedule = list()  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–¥–µ–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
def text_day_of_week(day_of_week):
    return {0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞'}[day_of_week]


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def generate_image(schedule):
    # –ó–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    column_widths = [max(schedule[col].astype(str).apply(len).max() + 1, len(str(col))) for col in schedule.columns]

    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    width = sum(column_widths) * 10  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å 10 –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    height = (9 if len(schedule) != 4 else 8) * 30  # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
    image = Image.new("RGB", (width, height), (255, 255, 143))  # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ñ–æ–Ω–æ–º —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    draw = ImageDraw.Draw(image)

    # –°–æ–∑–¥–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è PIL
    # font = ImageFont.truetype("DejaVuSans.ttf", 16) # –¥–ª—è linux
    font = ImageFont.truetype("arial.ttf", 18)  # –¥–ª—è –≤–∏–Ω–¥—ã

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    x, y = 10, 10

    # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    for index, row in schedule.iterrows():
        for i, (col, width) in enumerate(zip(schedule.columns, column_widths)):
            text = str(row[col])
            draw.text((x, y), text, fill="black", font=font)
            x += width * 10  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å 10 –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        y += 30  # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
        x = 10

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image.save('temp/schedule.png')


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start(dp):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = f"""ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nüïì –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now(local_timezone).strftime('%Y-%m-%d %H:%M')}\n\n
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_print_schedule}\n
üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_check_schedule}\n\n
üéì –ö–ª–∞—Å—Å –∏ —Å–º–µ–Ω–∞: {config.school_class}, {['–ø–µ—Ä–≤–∞—è', '–≤—Ç–æ—Ä–∞—è'][config.school_change - 1]}\n
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n{['üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞', f"üü¢ –í–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ {config.auto_send_delay // 60} –º–∏–Ω—É—Ç."][config.auto_send]}\n\n"""

    send_status = await bot.send_message(config.schedule_chat_id, status, disable_notification=True)

    if config.auto_send:
        await asyncio.gather(status_updater(send_status), schedule_auto_sending())
    else:
        await status_updater(send_status)


# –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
async def status_updater(send_status):
    while True:
        await asyncio.sleep(3)
        status = f"""ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nüïì –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now(local_timezone).strftime('%Y-%m-%d %H:%M')}\n\n
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_print_schedule}\n
üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {last_check_schedule}\n\n
üéì –ö–ª–∞—Å—Å –∏ —Å–º–µ–Ω–∞: {config.school_class}, {['–ø–µ—Ä–≤–∞—è', '–≤—Ç–æ—Ä–∞—è'][config.school_change - 1]}\n
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n{['üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞', f"üü¢ –í–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ {config.auto_send_delay // 60} –º–∏–Ω—É—Ç."][config.auto_send]}\n\n"""

        await bot.edit_message_text(status, chat_id=config.schedule_chat_id, message_id=send_status.message_id)
        await asyncio.sleep(config.status_delay)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 15–º
async def schedule_auto_sending():
    global last_print_schedule  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    global last_check_schedule  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    global last_print_time_day  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–Ω—è –ø–µ—á–∞—Ç–∏
    global prev_schedule  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–¥–µ–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    global last_print_time_hour  # —á–∞—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    schedule = list()

    # –ø–∞—Ç—Ç–µ—Ä–Ω  –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
    datetime_pattern = r'\d{2}\.\d{2}\.\d{4}\. (\d{2}:\d{2}:\d{2})'
    while True:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        local_date = datetime.now(local_timezone)

        # –¶–∏–∫–ª –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
        while True:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                schedule = pd.read_html(f"https://lyceum.tom.ru/raspsp/index.php?k={config.school_class}&s={config.school_change}", keep_default_na=True, encoding="cp1251")  # ptcp154, also work
                last_check_schedule = local_date.strftime('%d.%m.%Y %H:%M:%S')
                print()
                print(local_date.strftime('%Y-%m-%d %H:%M'))
                print('parsing', '\n    scheduel:', type(schedule), '\n    prev_schedule', type(prev_schedule))
                break

            except:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
                await bot.send_message(config.chat_id, '–°–∞–π—Ç —É–º–µ—Ä. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 15–º.', disable_notification=True)

                # timer
                await asyncio.sleep(config.auto_send_delay)
                continue

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_change_time = re.search(datetime_pattern, schedule[3][0][0]).group()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        # –∏–ª–∏
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ 8 –∏–ª–∏ –ø–æ–∑–∂–µ –∏ –ø–æ—Å–ª–µ 15 —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª–æ—Å—å.
        if (last_print_schedule != schedule_change_time and local_date.weekday() != 5) or (local_date.hour >= 20 and (local_date.weekday() != 5 and (last_print_time_hour < 15 and local_date.weekday() != 6 or last_print_time_day != local_date.day))):

            # –æ–±–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            last_print_schedule = schedule_change_time
            day_of_week = local_date.weekday()  # –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ 0-6

            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if day_of_week + 1 in [6, 7]:  # –ï—Å–ª–∏ —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                if local_date.hour >= 10:  # –∏ –±–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤
                    day_of_week = 0
            else:
                if (local_date.hour >= 15) or (prev_schedule == schedule):
                    day_of_week += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            prev_schedule = schedule.copy()

            print('after', '\n    scheduel:', type(schedule), '\n    prev_schedule', type(prev_schedule))

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞–ø–∏—Å–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
            formatted_schedule = schedule[3 + (day_of_week + 1) % 7].fillna('-').iloc[:, 1:]

            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É temp
            generate_image(formatted_schedule)

            # —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            # –≤–∏–¥–∏–º–æ –∏–Ω–æ–≥–¥–∞ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞, –ø–æ —ç—Ç–æ–º—É —á–µ—Ä–µ–∑ while –∏ try-except
            while True:
                try:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    with open('temp/schedule.png', 'rb') as photo_file:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                        await bot.send_photo(config.chat_id, photo_file, f'{text_day_of_week(day_of_week)} - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: [{last_print_schedule}]\n\n')
                        last_print_time_day = local_date.day
                        last_print_time_hour = local_date.hour
                    break

                except:
                    continue

        # –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await asyncio.sleep(config.auto_send_delay)


# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
async def send_error_message(error):
    print('Error:', error)
    await bot.send_message(config.control_chat_id, text=f'–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(error)}')


if __name__ == '__main__':
    print('Bot started')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try:
        executor.start_polling(dp, skip_updates=False, relax=1, on_startup=start)
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        asyncio.run(send_error_message(e))
